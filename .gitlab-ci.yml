image: registry.sme.uni-bamberg.de/bambirds/testing/build:0.5.1

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  #  - echo `pwd` # debug
  #  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
  - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - prepare
  - test
  - check
  - publish
  - release
  - evaluate


cache:
  paths:
    - .gradle/


compile:
  stage: prepare
  script:
    - ./gradlew jar
    - ./gradlew testClasses
  artifacts:
    untracked: false
    expire_in: 10 days
    paths:
      - "bin/"
      - "build/"
      - "*/bin/"
      - "*/build/"

chrome-extension:
  stage: prepare
  image: node:alpine
  script:
    - cp -f game/Levels/levels_organised/learning_0/* game/Levels/original-levels/package1/
    - npx crx pack game/Levels/ -o custom_levels.crx
  artifacts:
    paths:
      - "custom_levels.crx"
    expire_in: 30 days

.gradle-test-template:
  script:
    - ./gradlew ${PROJECT}:test
    - |
      if [ -f "$JACOCO_REPORT_CSV" ]; then
        awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print 100*covered/instructions, "% covered" }' ${JACOCO_REPORT_CSV}
      else
        echo jacoco report file "$JACOCO_REPORT_CSV" does not exist
        echo 0.0 % covered
      fi
  artifacts:
    reports:
      junit:
        - "${CI_PROJECT_DIR}/${PROJECT}/build/test-results/test/TEST-*.xml"
  coverage: '/([0-9]{1,3}|[0-9]{1,3}\.[0-9]*).%.covered/'
  variables:
    JACOCO_REPORT_CSV: ${CI_PROJECT_DIR}/${PROJECT}/build/reports/jacoco/test/jacocoTestReport.csv

test:
  stage: test
  extends: .gradle-test-template
  needs:
    - job: "compile"
      artifacts: true
  parallel: 
    matrix:
      - PROJECT: ["", "client", "common", "level_selection", "planner", "vision", "feedback"]

test-root-ab:
  stage: test
  tags:
    - docker
    - selenoid
  when: manual
  extends: .gradle-test-template
  variables:
    PROJECT: ""
  before_script:
    - curl http://selenoid:4444/
  script:
    - ./gradlew ${PROJECT}:test
  after_script:
    - wget "http://selenoid:4444/video/bambirds-ab-${CI_JOB_ID}.mp4"
  needs:
  - job: "chrome-extension"
    artifacts: true
  - job: "compile"
    artifacts: true
  artifacts:
    paths:
      - "bambirds-ab*.mp4"
      - "results.txt"
      - "situation*.pl"
      - "logs/*"
      - "debug/*"
    expire_in: 30 days

.gradle-check-template:
  script:
    - ./gradlew ${PROJECT}:checkStyleMain
    - ./gradlew ${PROJECT}:checkStyleTest
  artifacts:
    when: on_failure
    paths:
      - "${CI_PROJECT_DIR}/${PROJECT}/build/reports/checkstyle/*"

check:
  stage: check
  extends: .gradle-check-template
  allow_failure: true
  variables:
    CHECKSTYLE_SHOW_FAILURES: "true"
  needs:
    - job: "compile"
      artifacts: true
  parallel:
    matrix:
      - PROJECT: ["", "client", "common", "level_selection", "planner", "vision"]

publish artifacts:
  stage: publish
  script:
    - ./gradlew assemble
  artifacts:
    paths:
      - "build/libs/*.jar"
      - "*/build/libs/*.jar"
      - "build/distributions/*"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
  needs:
    - job: "test"
      artifacts: false
    - job: "compile"
      artifacts: true

publish packages:
  stage: publish
  script:
    - ./gradlew -Prelease_version=${CI_COMMIT_TAG} assemble
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "build/distributions/${PACKAGE_NAME}.zip" "${PACKAGE_PATH}/${PACKAGE_NAME}.zip"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "build/distributions/${PACKAGE_NAME}.tar" "${PACKAGE_PATH}/${PACKAGE_NAME}.tar"'
  variables:
    PACKAGE_NAME: bambirds-${CI_COMMIT_TAG}
    PACKAGE_PATH: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bambirds/${CI_COMMIT_TAG}
  artifacts:
    paths:
      - "build/libs/*.jar"
      - "*/build/libs/*.jar"
      - "build/distributions/*"
    expire_in: 1 week
  needs:
    - job: "test"
      artifacts: false
    - job: "compile"
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

.docker-build:
  image: docker:19.03
  services:
    - docker:19.03-dind
  tags:
    - docker
    - build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay
    IMAGE_NAME: $CI_REGISTRY_IMAGE
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"
    - echo "IMAGE_TAG=$IMAGE_TAG" >> image.env
  artifacts:
    reports:
      dotenv: image.env
    expire_in: 30 days

publish docker:
  stage: publish
  extends: .docker-build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    # Nightly schedule
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      variables:
        IMAGE_TAG: nightly-${CI_COMMIT_SHORT_SHA}
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
      variables:
        IMAGE_TAG: latest
    - if: $CI_COMMIT_TAG
      when: on_success
      variables:
        IMAGE_TAG: $CI_COMMIT_REF_NAME
  needs:
    - job: "test"
      artifacts: false

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Running the release job."
  needs:
    - job: "publish packages"
      artifacts: false
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Automatically created release'
    assets:
      links:
        - name: ${PACKAGE_NAME}.zip
          url: ${PACKAGE_PATH}/${PACKAGE_NAME}.zip
        - name: ${PACKAGE_NAME}.tar
          url: ${PACKAGE_PATH}/${PACKAGE_NAME}.tar
  variables:
    PACKAGE_NAME: bambirds-${CI_COMMIT_TAG}
    PACKAGE_PATH: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bambirds/${CI_COMMIT_TAG}
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

submit for evaluation:
  image: python:3.10
  stage: evaluate
  tags:
    - docker
  variables:
    API_URL: https://bambirds.sme.uni-bamberg.de/api
    NIGHTLY_LAST_COMMIT_MAX_AGE: --months 1
  before_script:
    - pip install requests requests_toolbelt python-dateutil
  script:
    - if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]]; then python scripts/last_commit_max_age.py $NIGHTLY_LAST_COMMIT_MAX_AGE; fi
    - python scripts/submit_agent_version.py BamBirds $IMAGE_TAG --type $TYPE
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
      variables:
        TYPE: dev
    # Nightly schedule
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
      variables:
        TYPE: nightly
    - if: $CI_COMMIT_TAG
      when: on_success
      variables:
        TYPE: stable
  needs:
  - job: "publish docker"
    artifacts: true
