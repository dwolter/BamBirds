package de.uniba.sme.bambirds.planner.physicssimulation.scene.modification.randomisation;

import de.uniba.sme.bambirds.planner.physicssimulation.SimulationUtils;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.Scene;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.entities.SceneCircle;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.entities.SceneEntityBase;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.entities.ScenePolygon;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.entities.SceneRectangle;
import de.uniba.sme.bambirds.planner.physicssimulation.scene.modification.ISceneModifier;
import org.jbox2d.common.MathUtils;

import java.util.Random;


	public class RotationRandomizer implements ISceneModifier {

		private float maxAngleOffsetInDegrees;

		private Random random = new Random();

		/**
		 * Randomises the rotation-angle for each entity in order to simulate vision
		 * inaccuracies. Does not change polygons. Input refers to pixel values (therefore
		 * apply this modifier directly to Scene generated by Vision). Randomisation
		 * adds a value from [-maxAngleOffset to +maxAngleOffset] to the original data (continuos
		 * range).
		 *
		 * @param maxAngleOffsetInDegrees x offset (in Angles)
		 */
		public RotationRandomizer(float maxAngleOffsetInDegrees) {
			this.maxAngleOffsetInDegrees = maxAngleOffsetInDegrees;
		}

		public void apply(Scene scene) {

			for(SceneEntityBase sceneEntityBase : scene.getAllEntities()){
				switch(sceneEntityBase.getAbType()){
					case Ice:
					case Stone:
					case Wood:
					case Pig:
						float maxAngleOffsetInRadians = maxAngleOffsetInDegrees * (float) Math.PI / 180f;
						float randomRotationOffsetInRadians = (random.nextFloat() - 0.5f) * 2f * maxAngleOffsetInRadians;
						sceneEntityBase.rotateLocally(randomRotationOffsetInRadians);
						break;
					default:
						break;
				}
			}
		}

		@Override public String toString() {
			return "angle=" + maxAngleOffsetInDegrees +"Â°";
		}
	}
